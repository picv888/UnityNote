Lua：是一个轻量级的脚本语句。不需要编译，直接运行的语言。

执行Lua有两种方式：
1、	交互式编程。
2、	脚本式编程。运行lua文件， .lua为文件后缀的！

Lua语句结尾不需要用分号结束，写了分号也没有问题。

注释：
单行注释：--
多行注释：--[[…….]]-- 或 –[[ ….. --]] 或  --[[ …. ]] 

变量定义：
Lua不需要写变量类型， 变量名 = 值
Lua的标识符（变量名）一一个字母或下划线开头，后跟0个或多个字母或数字或下划线。
Lua是区分大小写的！
变量存储什么类型数据就是什么类型。
使用type来获取变量的类型。

Lua的数据类型：
number：小数类型（lua没有整型和浮点的区分），对应C#的int， float， double
boolean：布尔类型，true和false。Lua里把false和nil看做是假，其他的都是真
nil：表示空数据，等同于null。对于未被定义的变量，想要使用的话得到的都是nil
string：字符串类型，可以使用双引号表示，也可以使用单引号表示，还可以使用[[…]]表示
1．	在对两个字符串类型的变量进行算术操作的时候，加减乘除求余，Lua会尝试把这两个字符串去转换成数字去做计算，如果字符串转换不成功则报错
2．	使用..来做两个字符串的连接。
3．	使用#来计算字符串的长度，放在字符串的前面。
 
table表类型：table表示一个数组的时候，默认索引是从1开始的
创建：b = {}
 
访问：
 
Table表示数组的时候插入（索引的连续性）
： 

Table表示数组的时候的删除（保证索引连续）
 

Table并不是一个数组，实际是一个“关联数组”，关联数组的索引可以是数字也可以是字符串。
 

Lua中的运算符
数学运算符：+  -  *  /  %  ^ 
Lua里没有自增自减运算符，也没有 += *= 之类的

关系运算符：== , >=, >, <, <= , ~= 
Lua里的不等于 ~=

逻辑运算符：and  or  not

流程控制语句
 

循环语句:
 


局部变量和全局变量
一般情况下，定义的变量都是全局的变量，包括方法内定义的
如果变量前多了local关键字，那么证明该变量局部的变量






方法：
 
 
 

调用方法时，一定是先定义，再调用！

元表：改变规则的
Setmetatable(a,b)—把b设置为a的元表
Getmetatable(a) – 返回a的元表

元方法的名字：
算术类：__add(加法)  __sub(减法)  __mul(乘法)  __div(除法)  __unm(相反数)  __mod(取余)   __pow(求幂)
访问类：__index(查询)   __newindex(修改table的字段)
关系类：__eq(等于)   __lt(小于)等等


