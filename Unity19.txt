IK动画: 反向动力学动画 {
    必须是新动画系统Animator

    模型的动画类型必须是Humanoid

    动画系统的 IKPass必须开启: Animator窗口, Layer右上角的齿轮 - IK Pass

    相应的IK调整方法只能写在生命周期函数void OnAnimatorIK (int layerIndex), 脚本组件必须和Animator组件在同一个物体里.
    ////在什么时候被调用?
    void OnAnimatorIK (int layerIndex) {
        //用代码调整头部看向的方向
        anim.SetLookAtPosition (Vector3 lookAtPosition);
        //调整IK动画的权重,如果是1代表完全按代码逻辑播放动画,如果是0完全按原动画播放
        anim.SetLookAtWeight (float weight);

        //调整四肢IK的目标点
        anim.SetIKPosition (AvatarIKGoal goal, Vector3 goalPosition);
        //调整四肢IK动画的权重
        anim.SetIKPositionWeight (AvatarIKGoal goal, float value);

        //调整四肢IK关节的目标点
        anim.SetIKHintPosition (AvatarIKHint hint, Vector3 hintPosition);
        //调整四肢IK关节动画的权重
        anim.SetIKHintPositionWeight (AvatarIKHint hint, float value);

        //调整四肢IK的朝向
        anim.SetIKRotation (AvatarIKGoal goal, Quaternion goalRotation);
        //调整四肢IK的朝向动画的权重
        anim.SetIKRotationWeight (AvatarIKGoal goal, float value);

        //调整四肢IK关节的朝向
        anim.SetIKHintPosition (AvatarIKHint hint, Vector3 hintPosition);
        //调整四肢IK关节的朝向动画的权重
        anim.SetIKHintPositionWeight (AvatarIKHint hint, float value);
    }
}

Particle System: 粒子系统 {
    修改 {
        大小 {
            我们没有办法通过GameObject的Scale改粒子的大小

            可以通过StarSize修改粒子的大小

            可以通过Sizeoverlife曲线修改粒子的大小
        }
    }

    启动碰撞 {

    }
}

第三人称射击 {
    怪物管理器 {
        分析是否刷新怪物 {
            怪物的数量是否小于设置的数量
        }
    }

    怪物 {
        死亡 {
            通知管理器自己死了

            把自己毁灭
        }

        行走 {
            调用寻路机制,
            找目标点
        }

        闲置 {
            如果玩家死了,
            就闲置
        }
    }
}

塔防 {
    怪物管理器 {
        分析是否刷新怪物 {
            刷怪时间: 如果怪物死光了,
            刷怪时间清0
        }
    }

    怪物 {
        死亡 {
            通知管理器自己死了

            通知玩家加金币

            把自己毁灭: 对象池
        }

        行走 {
            寻路: 从当前点走向下一点,
            如果到达下一点,
            把下一点设置成当前点,
            并检测新的下一点
        }

        闲置 {

        }
    }

    玩家 {
        在玩家有足够金币， 可以在塔基上修塔

        塔 {
            if (没有攻击目标) {
                如果攻击半径内有怪物 && 怪物没有死 {
                    将最近的怪物设置为攻击目标
                }
            }

            if (有攻击目标 && (攻击目标不在攻击半径内 || 攻击目标死了)) {
                将攻击目标设置为null
            }

            if (有攻击目标 && 攻击目标在攻击半径内 && 攻击目标没死) {
                if (满足 "自定义攻击判断") {
                    如果攻击冷却好了 {
                        枪口特效、 开枪声音

                        实例化一个子弹、 把子弹的目标设置成攻击目标

                        攻击冷却
                    }
                } else {
                    执行 "自定义攻击判断false时的方法"
                }
            }
        }

        "自定义攻击判断"
        和 "自定义攻击判断false时的方法" {
            攻击目标在攻击扇形范围内: 塔转向攻击目标
        }

        升级 {

        }

        拆除 {

        }
    }
}

子弹 {
    飞向目标 {
        目标进入范围 {
            调用目标的Damage () 方法
        }
    }
}

摄像机 {
    鼠标在窗口边缘时移动摄像机
}

UI {
    金币

    生命
}

对象池 {
    子弹

    怪物

    特效
}
}

关掉雾: Window - Lighting - Setting - Other Settings - Fog - 勾去掉