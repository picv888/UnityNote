XLua
运行Xlua：
1.	引用命名空间
2.	创建虚拟机
3.	运行lua语句
4.	不需要时释放虚拟机
LuaEnv：lua的虚拟机

C#调用Lua的文件：
1．	Lua文件的后缀必须是.lua.txt的，file.lua.txt。
2．	Lua文件必须放在Resources文件夹下，不能是子文件夹，默认加载器的原因。
3．	Lua文件的编码格式必须是UTF-8的。
4．	使用Lua的关键字require调用，不需要写文件后缀，只需要写文件名
例如：file.lua.txt    require ‘file’
5．对于文件的返回值，需要写成 return require ‘file’才能获得

自定义的加载器：能执行我们想要执行指定文件夹下lua文件
自定义的加载器的参数：require 传入的文件名
自定义的返回值：要执行的Lua的语句转换成的字节数组（UTF-8转换），如果返回null，证明未找到文件。
一个lua的虚拟机能添加无数个自定义加载器：从第一个加载器中开始找，如果找到了（未返回null），那么就不进行之后的其他的加载器，如果所有的自定义的加载器都未找到，执行默认的加载器，从Resources文件夹中寻找文件，如果从默认的也未找到，直接报错.


C#访问Lua的全局变量
虚拟机执行一个lua语句之后，lua里的全局的变量或方法，
都存放在luaenv.Global , 从Global中获取这些全的变量或方法

C#访问全句的table
1．	映射到类或结构体中
只能把table中的键值对映射到类中公共变量并且变量名与键名一致。
对于类中如果变量多与table的键值对，table键值对多余类中变量，都没有任何的影响
2．	使用接口映射
不光能映射基本类型，还能映射table中的方法。
Table中的键与接口中的属性名或方法名对应上。
3．	使用字典或list映射
List映射时，只能映射索引的数字且连续的，并且只能映射值与list指定了类型一致的元素
对于字典：当指定了字典的键类型和值类型之后，table中键与字典的键的类型一致，且键对应的值的类型与字典中值类型一致的也会映射过来。
4．使用XLua提供的LuaTable来映射


C#映射全局方法
1．	使用委托映射
Lua中多返回值的情况：如果C#的委托有返回值，那么lua的函数的第一个返回值就是委托的返回值，第二个返回值之后依次对应委托里的out或ref参数传出。
如果C#的委托是无返回值的，那么lua函数从第一个返回值开始，依次对应委托的out或ref参数传出。
2．	使用LuaFunction映射

Lua调用C#的变量或方法
调用静态的变量
CS.命名空间.类名.变量或属性名 或  CS.类名.变量或属性名

	类实例化：
	变量名 = CS.命名空间.类名() 或 CS.类名()
	调用成员变量或属性
对象名.变量名或属性名

Lua调用C#的方法
静态：调用C#的静态方法： CS.命名空间.类名.方法名() 或 CS.类名.方法名()
非静态的: 调用C#的成员方法： 对象名:方法名()


