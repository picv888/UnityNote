
XLua 支持通过子类对象去访问父类的属性变量和方法

对于C#的ref，out参数的方法
当调用的时候：out类型的参数是不需要传递实参的，普通的参数和ref参数需要传递实参
Out，ref传出值通过lua函数的多返回值传出的，如果C#的函数有返回值，那么lua调用时的第一个返回值就是函数的返回值，之后依次是out和ref参数的传出值。

XLua是支持C#函数重载的，XLua并不是严格的支持C#的函数的重载，因为Lua的number类型对应C# int，float等等类型。

XLua是支持C#的可变参数的方法，并且调用跟C#是相同的

C#的默认参数必须放在非默认参数的后面, 调用时，如果传入值那么就按照传入的值处理，如果未传入值，那么按默认的值处理。
XLua是支持C#的默认参数的！

Lua调用C#枚举
CS.命名空间.枚举名.枚举值 或 CS.枚举名.枚举值
Lua把字符串或数字转换成枚举
CS.命名空间.枚举名.__CastFrom(数字或字符串)
CS.枚举名.__CastFrom(数字或字符串)
注意：转换无限的数字不会报错，但是转换无效的字符串会报错。

Xlua是支持C#的委托，并且可以把Lua的方法添加到委托中去，但是Lua没有 += -=运算符。
对于一个空的委托，只能对其进行赋值a = b，不能a = a + b的形式添加
对于一个非空的委托，可以使用a = a + b(a = a - b)的形式去把b添加到a中
如果想把一个委托变为空。可以使用a = nil的方式

静态委托：CS.命名空间.类名.委托变量名 或 CS.类名.委托变量名
成员委托：对象名.委托变量名

静态事件：
CS.命名空间.类名.事件名('+或-',想要添加到事件里的方法名)
成员事件
对象名:事件名('+或-', 方法名)

对于委托和事件，在lua虚拟机释放之前需要C#的事件或委托需要清空




